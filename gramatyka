-- Standardowe, trochę okrojone C
			
entrypoints Program ;
Program.    Program ::= [Decl] ;

VDecl.      Decl ::= BasicType [VarDeclItem] ";" ;
ADecl.	 	Decl ::= ArrType [VarDeclItem] ";" ;
FDecl.      Decl ::= BasicType Ident "(" [FuncDeclItem] ")" "{" [Decl] [Stmt] "return" Expr ";" "}" ;
separator   Decl "" ; 

NoInit.     VarDeclItem ::= Ident ; 
Init.       VarDeclItem ::= Ident "=" Expr ;
separator   nonempty VarDeclItem "," ;

FDItem.     FuncDeclItem ::= BasicType Ident ;
separator   FuncDeclItem "," ;

Block.      Block ::= "{" [Stmt] "}" ;

VarAs.      Assign ::= Ident [Acc] "=" Expr ;
separator   Assign "," ;

EmptyStmt.  Stmt ::= ";" ;
IfStmt.     Stmt ::= "if" "(" Expr ")" Block ;
IfElseStmt. Stmt ::= "if" "(" Expr ")" Block "else" Block ;
WhileStmt.  Stmt ::= "while" "(" Expr ")" Block ;
ForStmt.    Stmt ::= "for" "(" Decl [Expr] ";" [Assign] ")" Block ;
AsStmt.     Stmt ::= Assign ";" ;
ExprStmt.   Stmt ::= Expr ";" ;
SCostStmt.  Stmt ::= CountCost ";" ;
separator   Stmt "" ;

IntT.       BasicType ::= "int" ;
StringT.    BasicType ::= "string" ;
BoolT.      BasicType ::= "bool" ;

ArrT.		ArrType ::= BasicType [Acc] ;

IntL.       Literal ::= Integer ;
StringL.    Literal ::= String ;
TrueL.      Literal ::= "true" ; 
FalseL.     Literal ::= "false" ;

Acc. 		Acc ::= "[" Expr "]" ;
separator 	Acc "" ;

ExprLit.   	Expr7 ::= Literal ;
ExprGC.    	Expr7 ::= GetCost ;
ExprBr.    	Expr7 ::= "(" Expr ")" ;
ExprCall.  	Expr7 ::= Ident "(" [Expr] ")" ;
ExprAcc.   	Expr7 ::= Ident [Acc] ;
Neg.       	Expr6 ::= "-" Expr7 ;
Not.       	Expr6 ::= "!" Expr7 ;
EMul.      	Expr5 ::= Expr6 MulOp Expr5 ;
EAdd.      	Expr4 ::= Expr5 AddOp Expr4 ;
ERel.      	Expr3 ::= Expr4 RelOp Expr3 ;
EEq.      	Expr2 ::= Expr3 EqOp Expr2 ;
EAnd.      	Expr1 ::= Expr2 AndOp Expr1 ;
EOr.       	Expr ::= Expr1 OrOp Expr ;
coercions  	Expr 7 ;
separator  	Expr "," ;

AOp.       	Op ::= AddOp ;
MOp.       	Op ::= MulOp ;
ROp.       	Op ::= RelOp ;
EOp. 		Op ::= EqOp ;
AndOp.		Op ::= AndOp ;
OrOp.		Op ::= OrOp ;

Plus.      	AddOp ::= "+" ;
Minus.     	AddOp ::= "-" ;
Mul.       	MulOp ::= "*" ;
Div.       	MulOp ::= "/" ;
Mod.       	MulOp ::= "%" ;
Less.      	RelOp ::= "<" ;
LessEq.    	RelOp ::= "<=" ;
Great.     	RelOp ::= ">" ;
GreatEq.   	RelOp ::= ">=" ;
Eq.        	EqOp  ::= "==" ;
NotEq.     	EqOp  ::= "!=" ;	
And. 		AndOp ::= "&&" ;
Or.			OrOp  ::= "||" ;


-- Nowości

CRead.     	CountCost ::= "count" Ident "read_cost" Expr "with" Ident ;
CWrite.    	CountCost ::= "count" Ident "write_cost" Expr "with" Ident ;
COp.       	CountCost ::= "count" Op "cost" Expr "with" Ident ;	

GRead.     	GetCost ::= "get" "read_cost" Ident ;
GWrite.    	GetCost ::= "get" "write_cost" Ident ;
GOpCost.   	GetCost ::= "get" "cost" Op ;


-- Komentarze

comment    	"//" ;
comment    	"/*" "*/" ;
