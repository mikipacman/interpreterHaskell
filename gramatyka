-- Standardowe, trochę okrojone C
			
entrypoints Program ;
Program.    Program ::= [Decl] ;

VDecl.      Decl ::= Type [VarDeclItem] ;
FDecl.      Decl ::= Type Ident "(" [FuncDeclItem] ")" "{" [Stmt] "return" Expr ";" "}" ;
separator   Decl "" ; 

NoInit.     VarDeclItem ::= Ident ; 
Init.       VarDeclItem ::= Ident "=" Expr ;
separator   nonempty VarDeclItem "," ;

FDItem.     FuncDeclItem ::= Type Ident ;
separator   FuncDeclItem "," ;

Block.      Block ::= "{" [Stmt] "}" ;

VarAs.      Assign ::= Ident "=" Expr ;
ArrAs.      Assign ::= Ident "[" Expr "]" "=" Expr ;  
separator   Assign "," ;

EmptyStmt.  Stmt ::= ";" ;
IfStmt.     Stmt ::= "if" "(" Expr ")" Block ;
IfElseStmt. Stmt ::= "if" "(" Expr ")" Block "else" Block ;
WhileStmt.  Stmt ::= "while" "(" Expr ")" Block ;
ForStmt.    Stmt ::= "for" "(" Decl ";" [Expr] ";" [Assign] ")" Block ;
AsStmt.     Stmt ::= Assign ";" ;
VDecStmt.   Stmt ::= Decl ";" ;
ExprStmt.   Stmt ::= Expr ";" ;
SCostStmt.  Stmt ::= CountCost ";" ;
separator   Stmt "" ;

IntT.       Type ::= "int" ;
StringT.    Type ::= "string" ;
BoolT.      Type ::= "bool" ;
VoidT.      Type ::= "void" ;
IntArrT.    Type ::= "int[]" ;
StringArrT. Type ::= "string[]" ;
BoolArrT.   Type ::= "bool[]" ;

IntL.       Literal ::= Integer ;
StringL.    Literal ::= String ;
TrueL.      Literal ::= "true" ; 
FalseL.     Literal ::= "false" ;

ExprVar.   	Expr6 ::= Ident ;
ExprLit.   	Expr6 ::= Literal ;
ExprGC.    	Expr6 ::= GetCost ;
ExprBr.    	Expr6 ::= "(" Expr ")" ;
ExprCall.  	Expr6 ::= Ident "(" [Expr] ")" ;
ExprAcc.   	Expr6 ::= Ident "[" Expr "]" ;
Neg.       	Expr5 ::= "-" Expr6 ;
Not.       	Expr5 ::= "!" Expr6 ;
EMul.      	Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      	Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      	Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.      	Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       	Expr ::= Expr1 "||" Expr ;
coercions  	Expr 6 ;
separator  	Expr "," ;

AOp.       	Op ::= AddOp ;
MOp.       	Op ::= MulOp ;
ROp.       	Op ::= RelOp ;

Plus.      	AddOp ::= "+" ;
Minus.     	AddOp ::= "-" ;
Mul.       	MulOp ::= "*" ;
Div.       	MulOp ::= "/" ;
Mod.       	MulOp ::= "%" ;
Less.      	RelOp ::= "<" ;
LessEq.    	RelOp ::= "<=" ;
Great.     	RelOp ::= ">" ;
GreatEq.   	RelOp ::= ">=" ;
Eq.        	RelOp ::= "==" ;
NotEq.     	RelOp ::= "!=" ;	


-- Nowości

CRead.     	CountCost ::= "count" Ident "read_cost" Expr "with" Ident ;
CWrite.    	CountCost ::= "count" Ident "write_cost" Expr "with" Ident ;
COp.       	CountCost ::= "count" Op "cost" Expr "with" Ident ;	

GRead.     	GetCost ::= "get" "read_cost" Ident ;
GWrite.    	GetCost ::= "get" "write_cost" Ident ;
GOpCost.   	GetCost ::= "get" "cost" Op ;


-- Komentarze

comment    	"//" ;
comment    	"/*" "*/" ;
