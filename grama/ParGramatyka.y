-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGramatyka where
import AbsGramatyka
import LexGramatyka
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  ',' { PT _ (TS _ 9) }
  '-' { PT _ (TS _ 10) }
  '/' { PT _ (TS _ 11) }
  ';' { PT _ (TS _ 12) }
  '<' { PT _ (TS _ 13) }
  '<=' { PT _ (TS _ 14) }
  '=' { PT _ (TS _ 15) }
  '==' { PT _ (TS _ 16) }
  '>' { PT _ (TS _ 17) }
  '>=' { PT _ (TS _ 18) }
  '[' { PT _ (TS _ 19) }
  ']' { PT _ (TS _ 20) }
  'bool' { PT _ (TS _ 21) }
  'cost' { PT _ (TS _ 22) }
  'count' { PT _ (TS _ 23) }
  'else' { PT _ (TS _ 24) }
  'false' { PT _ (TS _ 25) }
  'for' { PT _ (TS _ 26) }
  'get' { PT _ (TS _ 27) }
  'if' { PT _ (TS _ 28) }
  'int' { PT _ (TS _ 29) }
  'read_cost' { PT _ (TS _ 30) }
  'return' { PT _ (TS _ 31) }
  'string' { PT _ (TS _ 32) }
  'true' { PT _ (TS _ 33) }
  'while' { PT _ (TS _ 34) }
  'with' { PT _ (TS _ 35) }
  'write_cost' { PT _ (TS _ 36) }
  '{' { PT _ (TS _ 37) }
  '||' { PT _ (TS _ 38) }
  '}' { PT _ (TS _ 39) }
  L_ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }
  L_quoted { PT _ (TL $$) }

%%

Ident   :: { Ident }
Ident    : L_ident  { Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

String  :: { String }
String   : L_quoted {  $1 }

Program :: { Program }
Program : ListDecl { AbsGramatyka.Program (reverse $1) }
Decl :: { Decl }
Decl : BasicType ListVarDeclItem ';' { AbsGramatyka.VDecl $1 $2 }
     | ArrType ListVarDeclItem ';' { AbsGramatyka.ADecl $1 $2 }
     | BasicType Ident '(' ListFuncDeclItem ')' '{' ListDecl ListStmt 'return' Expr ';' '}' { AbsGramatyka.FDecl $1 $2 $4 (reverse $7) (reverse $8) $10 }
ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] } | ListDecl Decl { flip (:) $1 $2 }
VarDeclItem :: { VarDeclItem }
VarDeclItem : Ident { AbsGramatyka.NoInit $1 }
            | Ident '=' Expr { AbsGramatyka.Init $1 $3 }
ListVarDeclItem :: { [VarDeclItem] }
ListVarDeclItem : VarDeclItem { (:[]) $1 }
                | VarDeclItem ',' ListVarDeclItem { (:) $1 $3 }
FuncDeclItem :: { FuncDeclItem }
FuncDeclItem : BasicType Ident { AbsGramatyka.FDItem $1 $2 }
ListFuncDeclItem :: { [FuncDeclItem] }
ListFuncDeclItem : {- empty -} { [] }
                 | FuncDeclItem { (:[]) $1 }
                 | FuncDeclItem ',' ListFuncDeclItem { (:) $1 $3 }
Block :: { Block }
Block : '{' ListStmt '}' { AbsGramatyka.Block (reverse $2) }
Assign :: { Assign }
Assign : Ident ListAcc '=' Expr { AbsGramatyka.VarAs $1 (reverse $2) $4 }
ListAssign :: { [Assign] }
ListAssign : {- empty -} { [] }
           | Assign { (:[]) $1 }
           | Assign ',' ListAssign { (:) $1 $3 }
Stmt :: { Stmt }
Stmt : ';' { AbsGramatyka.EmptyStmt }
     | 'if' '(' Expr ')' Block { AbsGramatyka.IfStmt $3 $5 }
     | 'if' '(' Expr ')' Block 'else' Block { AbsGramatyka.IfElseStmt $3 $5 $7 }
     | 'while' '(' Expr ')' Block { AbsGramatyka.WhileStmt $3 $5 }
     | 'for' '(' Decl ListExpr ';' ListAssign ')' Block { AbsGramatyka.ForStmt $3 $4 $6 $8 }
     | Assign ';' { AbsGramatyka.AsStmt $1 }
     | Expr ';' { AbsGramatyka.ExprStmt $1 }
     | CountCost ';' { AbsGramatyka.SCostStmt $1 }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
BasicType :: { BasicType }
BasicType : 'int' { AbsGramatyka.IntT }
          | 'string' { AbsGramatyka.StringT }
          | 'bool' { AbsGramatyka.BoolT }
ArrType :: { ArrType }
ArrType : BasicType ListAcc { AbsGramatyka.ArrT $1 (reverse $2) }
Literal :: { Literal }
Literal : Integer { AbsGramatyka.IntL $1 }
        | String { AbsGramatyka.StringL $1 }
        | 'true' { AbsGramatyka.TrueL }
        | 'false' { AbsGramatyka.FalseL }
Acc :: { Acc }
Acc : '[' Expr ']' { AbsGramatyka.Acc $2 }
ListAcc :: { [Acc] }
ListAcc : {- empty -} { [] } | ListAcc Acc { flip (:) $1 $2 }
Expr7 :: { Expr }
Expr7 : Literal { AbsGramatyka.ExprLit $1 }
      | GetCost { AbsGramatyka.ExprGC $1 }
      | '(' Expr ')' { AbsGramatyka.ExprBr $2 }
      | Ident '(' ListExpr ')' { AbsGramatyka.ExprCall $1 $3 }
      | Ident ListAcc { AbsGramatyka.ExprAcc $1 (reverse $2) }
      | '(' Expr ')' { $2 }
Expr6 :: { Expr }
Expr6 : '-' Expr7 { AbsGramatyka.Neg $2 }
      | '!' Expr7 { AbsGramatyka.Not $2 }
      | Expr7 { $1 }
Expr5 :: { Expr }
Expr5 : Expr5 MulOp Expr6 { AbsGramatyka.EMul $1 $2 $3 }
      | Expr6 { $1 }
Expr4 :: { Expr }
Expr4 : Expr4 AddOp Expr5 { AbsGramatyka.EAdd $1 $2 $3 }
      | Expr5 { $1 }
Expr3 :: { Expr }
Expr3 : Expr3 RelOp Expr4 { AbsGramatyka.ERel $1 $2 $3 }
      | Expr4 { $1 }
Expr2 :: { Expr }
Expr2 : Expr2 EqOp Expr3 { AbsGramatyka.EEq $1 $2 $3 }
      | Expr3 { $1 }
Expr1 :: { Expr }
Expr1 : Expr2 AndOp Expr1 { AbsGramatyka.EAnd $1 $2 $3 }
      | Expr2 { $1 }
Expr :: { Expr }
Expr : Expr1 OrOp Expr { AbsGramatyka.EOr $1 $2 $3 } | Expr1 { $1 }
ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
Op :: { Op }
Op : AddOp { AbsGramatyka.AOp $1 }
   | MulOp { AbsGramatyka.MOp $1 }
   | RelOp { AbsGramatyka.ROp $1 }
   | EqOp { AbsGramatyka.EOp $1 }
   | AndOp { AbsGramatyka.AndOp $1 }
   | OrOp { AbsGramatyka.OrOp $1 }
AddOp :: { AddOp }
AddOp : '+' { AbsGramatyka.Plus } | '-' { AbsGramatyka.Minus }
MulOp :: { MulOp }
MulOp : '*' { AbsGramatyka.Mul }
      | '/' { AbsGramatyka.Div }
      | '%' { AbsGramatyka.Mod }
RelOp :: { RelOp }
RelOp : '<' { AbsGramatyka.Less }
      | '<=' { AbsGramatyka.LessEq }
      | '>' { AbsGramatyka.Great }
      | '>=' { AbsGramatyka.GreatEq }
EqOp :: { EqOp }
EqOp : '==' { AbsGramatyka.Eq } | '!=' { AbsGramatyka.NotEq }
AndOp :: { AndOp }
AndOp : '&&' { AbsGramatyka.And }
OrOp :: { OrOp }
OrOp : '||' { AbsGramatyka.Or }
CountCost :: { CountCost }
CountCost : 'count' Ident 'read_cost' Expr 'with' Ident { AbsGramatyka.CRead $2 $4 $6 }
          | 'count' Ident 'write_cost' Expr 'with' Ident { AbsGramatyka.CWrite $2 $4 $6 }
          | 'count' Op 'cost' Expr 'with' Ident { AbsGramatyka.COp $2 $4 $6 }
GetCost :: { GetCost }
GetCost : 'get' 'read_cost' Ident { AbsGramatyka.GRead $3 }
        | 'get' 'write_cost' Ident { AbsGramatyka.GWrite $3 }
        | 'get' 'cost' Op { AbsGramatyka.GOpCost $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

