-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsGramatyka where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Program = Program [Decl]
  deriving (Eq, Ord, Show, Read)

data Decl
    = VDecl BasicType [VarDeclItem]
    | ADecl ArrType [VarDeclItem]
    | FDecl BasicType Ident [FuncDeclItem] [Decl] [Stmt] Expr
  deriving (Eq, Ord, Show, Read)

data VarDeclItem = NoInit Ident | Init Ident Expr
  deriving (Eq, Ord, Show, Read)

data FuncDeclItem = FDItem BasicType Ident
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Assign = VarAs Ident [Acc] Expr
  deriving (Eq, Ord, Show, Read)

data Stmt
    = EmptyStmt
    | IfStmt Expr Block
    | IfElseStmt Expr Block Block
    | WhileStmt Expr Block
    | ForStmt Decl [Expr] [Assign] Block
    | AsStmt Assign
    | ExprStmt Expr
    | SCostStmt CountCost
  deriving (Eq, Ord, Show, Read)

data BasicType = IntT | StringT | BoolT
  deriving (Eq, Ord, Show, Read)

data ArrType = ArrT BasicType [Acc]
  deriving (Eq, Ord, Show, Read)

data Literal = IntL Integer | StringL String | TrueL | FalseL
  deriving (Eq, Ord, Show, Read)

data Acc = Acc Expr
  deriving (Eq, Ord, Show, Read)

data Expr
    = ExprLit Literal
    | ExprGC GetCost
    | ExprBr Expr
    | ExprCall Ident [Expr]
    | ExprAcc Ident [Acc]
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EEq Expr EqOp Expr
    | EAnd Expr AndOp Expr
    | EOr Expr OrOp Expr
  deriving (Eq, Ord, Show, Read)

data Op
    = AOp AddOp
    | MOp MulOp
    | ROp RelOp
    | EOp EqOp
    | AndOp AndOp
    | OrOp OrOp
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Mul | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = Less | LessEq | Great | GreatEq
  deriving (Eq, Ord, Show, Read)

data EqOp = Eq | NotEq
  deriving (Eq, Ord, Show, Read)

data AndOp = And
  deriving (Eq, Ord, Show, Read)

data OrOp = Or
  deriving (Eq, Ord, Show, Read)

data CountCost
    = CRead Ident Expr Ident
    | CWrite Ident Expr Ident
    | COp Op Expr Ident
  deriving (Eq, Ord, Show, Read)

data GetCost = GRead Ident | GWrite Ident | GOpCost Op
  deriving (Eq, Ord, Show, Read)

