{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintGramatyka.
--   Generated by the BNF converter.

module PrintGramatyka where

import qualified AbsGramatyka
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsGramatyka.Ident where
  prt _ (AbsGramatyka.Ident i) = doc (showString i)

instance Print AbsGramatyka.Program where
  prt i e = case e of
    AbsGramatyka.Program decls -> prPrec i 0 (concatD [prt 0 decls])

instance Print AbsGramatyka.Decl where
  prt i e = case e of
    AbsGramatyka.VDecl basictype vardeclitems -> prPrec i 0 (concatD [prt 0 basictype, prt 0 vardeclitems, doc (showString ";")])
    AbsGramatyka.ADecl arrtype vardeclitems -> prPrec i 0 (concatD [prt 0 arrtype, prt 0 vardeclitems, doc (showString ";")])
    AbsGramatyka.FDecl basictype id funcdeclitems decls stmts expr -> prPrec i 0 (concatD [prt 0 basictype, prt 0 id, doc (showString "("), prt 0 funcdeclitems, doc (showString ")"), doc (showString "{"), prt 0 decls, prt 0 stmts, doc (showString "return"), prt 0 expr, doc (showString ";"), doc (showString "}")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsGramatyka.Decl] where
  prt = prtList

instance Print AbsGramatyka.VarDeclItem where
  prt i e = case e of
    AbsGramatyka.NoInit id -> prPrec i 0 (concatD [prt 0 id])
    AbsGramatyka.Init id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 expr])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsGramatyka.VarDeclItem] where
  prt = prtList

instance Print AbsGramatyka.FuncDeclItem where
  prt i e = case e of
    AbsGramatyka.FDItem basictype id -> prPrec i 0 (concatD [prt 0 basictype, prt 0 id])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsGramatyka.FuncDeclItem] where
  prt = prtList

instance Print AbsGramatyka.Block where
  prt i e = case e of
    AbsGramatyka.Block stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print AbsGramatyka.Assign where
  prt i e = case e of
    AbsGramatyka.VarAs id accs expr -> prPrec i 0 (concatD [prt 0 id, prt 0 accs, doc (showString "="), prt 0 expr])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsGramatyka.Assign] where
  prt = prtList

instance Print AbsGramatyka.Stmt where
  prt i e = case e of
    AbsGramatyka.EmptyStmt -> prPrec i 0 (concatD [doc (showString ";")])
    AbsGramatyka.IfStmt expr block -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block])
    AbsGramatyka.IfElseStmt expr block1 block2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block1, doc (showString "else"), prt 0 block2])
    AbsGramatyka.WhileStmt expr block -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block])
    AbsGramatyka.ForStmt decl exprs assigns block -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 decl, prt 0 exprs, doc (showString ";"), prt 0 assigns, doc (showString ")"), prt 0 block])
    AbsGramatyka.AsStmt assign -> prPrec i 0 (concatD [prt 0 assign, doc (showString ";")])
    AbsGramatyka.ExprStmt expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString ";")])
    AbsGramatyka.SCostStmt countcost -> prPrec i 0 (concatD [prt 0 countcost, doc (showString ";")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsGramatyka.Stmt] where
  prt = prtList

instance Print AbsGramatyka.BasicType where
  prt i e = case e of
    AbsGramatyka.IntT -> prPrec i 0 (concatD [doc (showString "int")])
    AbsGramatyka.StringT -> prPrec i 0 (concatD [doc (showString "string")])
    AbsGramatyka.BoolT -> prPrec i 0 (concatD [doc (showString "bool")])

instance Print AbsGramatyka.ArrType where
  prt i e = case e of
    AbsGramatyka.ArrT basictype accs -> prPrec i 0 (concatD [prt 0 basictype, prt 0 accs])

instance Print AbsGramatyka.Literal where
  prt i e = case e of
    AbsGramatyka.IntL n -> prPrec i 0 (concatD [prt 0 n])
    AbsGramatyka.StringL str -> prPrec i 0 (concatD [prt 0 str])
    AbsGramatyka.TrueL -> prPrec i 0 (concatD [doc (showString "true")])
    AbsGramatyka.FalseL -> prPrec i 0 (concatD [doc (showString "false")])

instance Print AbsGramatyka.Acc where
  prt i e = case e of
    AbsGramatyka.Acc expr -> prPrec i 0 (concatD [doc (showString "["), prt 0 expr, doc (showString "]")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsGramatyka.Acc] where
  prt = prtList

instance Print AbsGramatyka.Expr where
  prt i e = case e of
    AbsGramatyka.ExprLit literal -> prPrec i 7 (concatD [prt 0 literal])
    AbsGramatyka.ExprGC getcost -> prPrec i 7 (concatD [prt 0 getcost])
    AbsGramatyka.ExprBr expr -> prPrec i 7 (concatD [doc (showString "("), prt 0 expr, doc (showString ")")])
    AbsGramatyka.ExprCall id exprs -> prPrec i 7 (concatD [prt 0 id, doc (showString "("), prt 0 exprs, doc (showString ")")])
    AbsGramatyka.ExprAcc id accs -> prPrec i 7 (concatD [prt 0 id, prt 0 accs])
    AbsGramatyka.Neg expr -> prPrec i 6 (concatD [doc (showString "-"), prt 7 expr])
    AbsGramatyka.Not expr -> prPrec i 6 (concatD [doc (showString "!"), prt 7 expr])
    AbsGramatyka.EMul expr1 mulop expr2 -> prPrec i 5 (concatD [prt 5 expr1, prt 0 mulop, prt 6 expr2])
    AbsGramatyka.EAdd expr1 addop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 addop, prt 5 expr2])
    AbsGramatyka.ERel expr1 relop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 relop, prt 4 expr2])
    AbsGramatyka.EEq expr1 eqop expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 0 eqop, prt 3 expr2])
    AbsGramatyka.EAnd expr1 andop expr2 -> prPrec i 1 (concatD [prt 2 expr1, prt 0 andop, prt 1 expr2])
    AbsGramatyka.EOr expr1 orop expr2 -> prPrec i 0 (concatD [prt 1 expr1, prt 0 orop, prt 0 expr2])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsGramatyka.Expr] where
  prt = prtList

instance Print AbsGramatyka.Op where
  prt i e = case e of
    AbsGramatyka.AOp addop -> prPrec i 0 (concatD [prt 0 addop])
    AbsGramatyka.MOp mulop -> prPrec i 0 (concatD [prt 0 mulop])
    AbsGramatyka.ROp relop -> prPrec i 0 (concatD [prt 0 relop])
    AbsGramatyka.EOp eqop -> prPrec i 0 (concatD [prt 0 eqop])
    AbsGramatyka.AndOp andop -> prPrec i 0 (concatD [prt 0 andop])
    AbsGramatyka.OrOp orop -> prPrec i 0 (concatD [prt 0 orop])

instance Print AbsGramatyka.AddOp where
  prt i e = case e of
    AbsGramatyka.Plus -> prPrec i 0 (concatD [doc (showString "+")])
    AbsGramatyka.Minus -> prPrec i 0 (concatD [doc (showString "-")])

instance Print AbsGramatyka.MulOp where
  prt i e = case e of
    AbsGramatyka.Mul -> prPrec i 0 (concatD [doc (showString "*")])
    AbsGramatyka.Div -> prPrec i 0 (concatD [doc (showString "/")])
    AbsGramatyka.Mod -> prPrec i 0 (concatD [doc (showString "%")])

instance Print AbsGramatyka.RelOp where
  prt i e = case e of
    AbsGramatyka.Less -> prPrec i 0 (concatD [doc (showString "<")])
    AbsGramatyka.LessEq -> prPrec i 0 (concatD [doc (showString "<=")])
    AbsGramatyka.Great -> prPrec i 0 (concatD [doc (showString ">")])
    AbsGramatyka.GreatEq -> prPrec i 0 (concatD [doc (showString ">=")])

instance Print AbsGramatyka.EqOp where
  prt i e = case e of
    AbsGramatyka.Eq -> prPrec i 0 (concatD [doc (showString "==")])
    AbsGramatyka.NotEq -> prPrec i 0 (concatD [doc (showString "!=")])

instance Print AbsGramatyka.AndOp where
  prt i e = case e of
    AbsGramatyka.And -> prPrec i 0 (concatD [doc (showString "&&")])

instance Print AbsGramatyka.OrOp where
  prt i e = case e of
    AbsGramatyka.Or -> prPrec i 0 (concatD [doc (showString "||")])

instance Print AbsGramatyka.CountCost where
  prt i e = case e of
    AbsGramatyka.CRead id1 expr id2 -> prPrec i 0 (concatD [doc (showString "count"), prt 0 id1, doc (showString "read_cost"), prt 0 expr, doc (showString "with"), prt 0 id2])
    AbsGramatyka.CWrite id1 expr id2 -> prPrec i 0 (concatD [doc (showString "count"), prt 0 id1, doc (showString "write_cost"), prt 0 expr, doc (showString "with"), prt 0 id2])
    AbsGramatyka.COp op expr id -> prPrec i 0 (concatD [doc (showString "count"), prt 0 op, doc (showString "cost"), prt 0 expr, doc (showString "with"), prt 0 id])

instance Print AbsGramatyka.GetCost where
  prt i e = case e of
    AbsGramatyka.GRead id -> prPrec i 0 (concatD [doc (showString "get"), doc (showString "read_cost"), prt 0 id])
    AbsGramatyka.GWrite id -> prPrec i 0 (concatD [doc (showString "get"), doc (showString "write_cost"), prt 0 id])
    AbsGramatyka.GOpCost op -> prPrec i 0 (concatD [doc (showString "get"), doc (showString "cost"), prt 0 op])

