int n = 1;
int[n] arr; 

int init_arr(int n) {
	for (int i = 0; i < n; i = i + 1) {
		arr[i] = n - i;
	}

	return 0; 
}

// Bubble sort
int sort(int n) {
	int swap;

	for (int i = 0; i < n - 1; i = i + 1) {
    	for (int j = 0; j < n - i - 1; j = j + 1) {
			if (arr[j] > arr[j + 1]) {
				swap = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = swap;
			}
    	}
  	}

  	return 0;
}

int print_arr() {
	for (int i = 0; i < n; i = i + 1) {
		printInt(arr[i]);
	}

	return 0;
}

int main() {

	int arr_reads, arr_writes, comparisons;
	int a, b;


	init_arr(n);
		printStr("BEFORE");
		print_arr();

			printStr("w cost");
			printInt(get write_cost arr);

			printStr("r cost");
			printInt(get read_cost arr);

			printStr("c cost");
			printInt(get cost <);

	count arr read_cost 1 with arr_reads;
	count arr write_cost 1 with arr_writes;
	count < cost 1 with comparisons;
	
			printStr("w cost");
			printInt(get write_cost arr);

			printStr("r cost");
			printInt(get read_cost arr);

			printStr("c cost");
			printInt(get cost <);

	sort(n);

	count arr read_cost 0 with arr_reads;
	count arr write_cost 0 with arr_writes;
	count < cost 0 with comparisons;


			printStr("w cost");
			printInt(get write_cost arr);

			printStr("r cost");
			printInt(get read_cost arr);
			
			printStr("c cost");
			printInt(get cost <);


		printStr("AFTER");
		print_arr(); 

		printStr("Arr reads:");
		printInt(arr_reads);

		printStr("Arr writes:");
		printInt(arr_writes);

		printStr("Comprisons:");
		printInt(comparisons);

	return 0;
}